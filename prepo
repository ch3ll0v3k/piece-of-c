#!/bin/bash

# Written by Pham The Chung
# create Thu 03 Jun 2010 10:12:54 PM ICT 
# last change 
# this is for git version control

User="'Pham The Chung'";
Email="pham.the.chung0@gmail.com";


### variable
Version="1.3";
Creat="Fri Jun 4 2010";
Last="Sat Feb 23 2013";
argc=$#;
argv="$@";

here=`pwd`;
project_name="piece-of-c";
progname="prepo";
home=~
prefix=~/.ssh
piece_private_key=id_rsa
piece_public_key=id_rsa.pub

r_url="git://gitorious.org/piece-of-c/piece-of-c.git"
rw_url="git@gitorious.org:piece-of-c/piece-of-c.git"

gitorious_r="git://gitorious.org/piece-of-c/piece-of-c.git"
gitorious_rw="git@gitorious.org:piece-of-c/piece-of-c.git"

github_r="git://github.com/phamthechung/piece-of-c.git"
github_rw="git@github.com:phamthechung/piece-of-c.git"

sf_rw="ssh://panfider@piece-c.git.sourceforge.net/gitroot/piece-c/piece-c"
sf_r="git://piece-c.git.sourceforge.net/gitroot/piece-c/piece-c"

google_user="pham.the.chung0@gmail.com";
hg_user="pham.the.chung0%%40gmail.com";
hg_proto="https://"
hg_url="piece-of-c.googlecode.com/hg/piece-of-c"
hg_google_rw="https://piece-of-c.googlecode.com/hg/piece-of-c";

piece_help="repo of piece-of-c project help: \n
Here is list of command I support:\n
\t add\t    Add file to index\n
\t rm\t	remove file\n
\t mv\t move file\n
\t branch\t List, create, delete branchs\n
\t clone\t  Clone a repository to your local.\n
\t commit\t   Record changes to the repo\n
\t push\t	Update remote refs along with objects\n
\t pull\t	Fetch from and merge with another repository or local branch\n
\t status\t show current status\n
\t help\t	help command to get hep for that command\n
\t install_myself\t install prepo to your system\n
\t self_version\t this tool version\n";
######key###
write_private_key(){
cat >$1/$piece_private_key<<EEOF
-----BEGIN RSA PRIVATE KEY-----
Proc-Type: 4,ENCRYPTED
DEK-Info: DES-EDE3-CBC,A1F9FF93CF2FAE04

swuFceeSf5wgXpe+CC4X+i6CxZE4T4NM1nf+ZyohNlla1aXOang7rMesaTKR580W
M/LkVCIJb3cuD2ue44QkU/H2FyMsb6ZjrPL+qZT0goXnyHz3F1A5+ccEX2YgTeqc
/qho8/E7cQwsPCqmUmAshyVBlhLSVnX6gEedyJ8tUuul5+SHDcFg//1R2whvKoXY
Xo27BNWjaSSTwDiCHclqzUATUIHxcruHM7bODNISAsMWGrY8TvP9qoeYif1R0ncy
EWvkAb46vaoTjOjB448K40R76CWck5u+ivcFqOpqsJdwOK9Vd3DUn80x2q08FJN9
v3OR0JaJ+7nUSFSl/4j341c6qNsDwHFRC7Obs9gpNVnWQY8A5/WUo3pnFL/7yNiq
7Gh3MiDx/oEVveXgZ2+Jhq6kFHLgiK5cPbHdcYAbvU0cgqWjlHvFNtOeyWZhQbfO
H+mMvybk5oizD9PIeanhrDlf/vVHWrY475MGNLI/ddgNhQxNV6nSHPH676EpN8wT
xnU6sw5pVIgRWfFuQ0IM6ttEAxLaXqI2tlaPvnGCVG+VSXJrAvWHgmhElVV8X470
Jtu9Tzeyxj09/wlgJV3T9EU4MWZFiArqQc+ZW2ocNGNl7+5tpvjSvlugulkihQwb
V+OMyFJbqa34dA5+MDPBCnQgUEcAiM62NJBnXtKNafeD2XIpyqa5KIz56uG9r8G3
xxKcFBYhUbTOUVigYVNjh+goJ4vlx+PihHUtsFHgj0LiN/S8HJHpADsG6u4mZZdY
lSDOwT980Qoy7/cPtbCrLfTCrNGxrrbLRjlYzu2L/wJXQE5v+AMuAHas9KfGL5+d
J9wAyh2O31Vw4X/QQZ/A60aVFUnMbDZm1ZFw6HIGbE4XO2vQgZBSuFYI9ZO7mrue
TT2s8rl0KPt0mpQ9LELTtPtkCvo0HJRJKNjSOAIvNjumdcd/BahlghMZevqdTa9O
USZJVm3l3Wmvy8UOm82B4RZ8gub6CQHcIcF0SI9NGgRAghkdt+tOcZZSkSLQFjHY
q7gUaev4USTlXNh0Ao6y1IwUzVracY9dVtXdNaD54mDPLPqqH2ZGFVEIoz4XPL1L
cikwVYDts9L0RZvtvVMa8TfGaJG52BmrsCAFmduiigGYLzptiVwfY7c3JNufGl/x
I3TU72+vRoHnTMjO+MzsQhOQnWzIlzvjKgzQoUbTUp93nUSB2t0BTplHUuz8NGnG
10ULpzSDrzt+HiNF34t97NRXskWicx29LrR8D8ad12hbifg/6To5Bz/Aw2luBglq
KLtg53tuTpmZQ6He7xWqOlXDVwk0jPYJWWgn7U3Gufai1t9nYKqy9YkBtg7zeF/U
782gTlumE8EvSrXoSIAnk3aUeM1bRV+Zq6wYjPRmv1QtBux1WRDH7+DSdsC1jeKb
flXFWm4bjm8l6ozoivOU5nuMhRsABLrkrDBcumN4yCCThZ6Bek2zyfZhv0XAs8p6
m1dA7r1F/TEwvFY96wEi6br1TvcOKwM3QiP2xrK6tEfFCmuvEmoU+3/PNijriz58
YR+he37a44DShrDjYwXR/o6LLnm9lwzCwqZhqV31pf4SyycvbTBpAw==
-----END RSA PRIVATE KEY-----

EEOF
}
write_public_key(){
cat >$1/$piece_public_key<<EEOF
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAsUgtSjT9wT1LlhD0fDRZgRdAzCfvOB4fIE1+NjK4MOI4bBRGpaZgLnhTA3c7GpTpZW+nFc59usuO+vH0RbuZwwGNwyq5XmC3XRRHcfqW1J5tVcfrshzAlOPbo4NtyuXa0hv6Gk12GU3/hA/FBShZ/yokB2MEUSbRowOM+kI8vJk= pham.the.chung0@gmail.com
EEOF
}
isdir(){
	if [ -d $1 ]; then
		return 0;
	else
		return 1;
	fi
}
#=====check git version control
isgitexist(){
	which git &>/dev/null;
	return $?;
}
iscmdexist(){
	which $1 &>/dev/null;
	return $?;
}
isdebian(){
	cat /proc/version|grep debian &>/dev/null;
	return $?;
}
# just copy git to local machine when system is debian
# apt-get install git-core git-web
copy_git(){
	if isgitexist;then
		return 0;
	fi
	if ! isdebian;then
		echo "Your linux system is not Debian";
		return 1;
	fi
	apt-get install git-core;
	return $?;
}
copy_scm(){
	if ! isdebian;then
		echo "Your Linux system is not Debian";
		return 1;
	fi
	case $1 in
	"git")
		apt-get install git-core;;
	"mercurial")
		apt-get install mercurial;;
	"subversion")
		apt-get install subversion;;
	"cvs")
		apt-get install cvs;;
	*)
		if ! [ -z $1 ]; then
			apt-get install $@;
		else
			echo "$progname say: install what ?";
		fi
		true;;
	esac
}

#########if key
give_key(){
  prefix=$1;
  write_private_key $1;
  chmod 0400 $1/id_rsa;
  return 0;
}

iskeyexist(){
	if ! isdir $home/.ssh;then
	 return 1;
	fi
	if [ -e $home/.ssh/id_rsa ];then
	 return 0;
	fi
	return 1;
}
ismykey(){
	if iskeyexist; then
	  give_key ".";
	  cmp ./id_rsa $prefix/id_rsa &> /dev/null;
	  ret=$?;
	  unlink ./id_rsa;
	  return $ret;
	fi
}
#===code of command of git======

# if want to clone
# what type of clone read mode or rd mode
# rw mode give_key;
#
clone_p(){
	case $1 in
		"gitorious") 
			shift;
			if [ $# == 0 ];then
 			  git clone $r_url;
 			  return $?;
			fi
			if [ $1 == "rw" ]; then
			  if ! iskeyexist;then
					give_key $prefix;
			  fi
			  git clone $rw_url;
			fi
			true;;
		"github") 
			shift;
			if [ $# == 0 ];then
 			  git clone $github_r;
 			  return $?;
			fi
			if [ $1 == "rw" ]; then
			  if ! iskeyexist;then
					give_key $prefix;
			  fi
			   git clone $github_rw;
			fi
			true;;
		"sf")	git clone $sf_r;;
		"google")
			code_url="$hg_proto$hg_user@$hg_url";
			echo clone $code_url;
			hg clone $code_url;;
		*) echo "$progname: dont understand command";;
	esac
}
clone(){
	case $# in
	0) echo "default clone from gitorious";
		git clone $r_url;;
	1) clone_p $@;;
	2) clone_p $@;;
	*) echo "prepo : I dont know this option";;
	esac
}

add(){
	$cmd add $@;
	return $?;
}
remove(){
	case $cmd in
	"git")
		$cmd rm $@;;
	"hg") $cmd remove $@;;
	esac
	return $?;
}
branch(){
	$cmd branch $@;
	return $?;
}
errq="using:\n 
\t prepo commit -m \"'text command here'\" to avoid error";
commit(){
	$cmd commit $@;
	err=$?;
	if [ $err == 1 ];then
		echo -e $errq;
	fi
	return $?;
}
push(){
	case $cmd in
		"git")
			$cmd push origin master;;
		"hg")
			echo "google pass: $pass_google";
			$cmd push;;
		*) echo " khong co command nay";;
	esac
	return $?;
}
pull(){
	$cmd pull $@;
	return $?;
}
status(){
	$cmd status $@;
	return $?;
}
piece_init(){
	if [ -d ./$name ]; then
		rm -fr $name/*;
	fi
	cd $name;
	$cmd init $@;
}
move(){
	case $cmd in
	"git") $cmd mv $@;;
	"hg") $cmd mv $@;
		echo "$cmd dont have mv command";;
	esac
	return $?;
}
merge(){
	$cmd merge $@;
	return $?;
}
copy_prepo(){
	path="/bin";
	if [ $# -ge 1 ]; then
		cp -v $0 $1;
	fi
	if ! cmp $0 $path/prepo &>/dev/null;then
		cp -vuf $0 $path;
	fi
	return $?;
}
phelp(){
	clone_help="syntax:\n\t$progname clone [gitorious|github|sf|google] [rw]\n
	default is gitorious with readonly\n
	if clone code.google.com, must have mercurial\n
	example:\n\t
	# $progname clone github rw\n
	simple command to get\n\t
	# $progname clone\n";
	
	ins_help="syntax:\n\t$progname $1 [path]\n
	default path is /bin\n";
	case $1 in
	"clone")
		echo -e $clone_help;
		true;;
	"install_myself")
		echo -e $ins_help;
		true;;
	*)
		echo "help dont support $1 now";
		true;;
	esac
}
exe_cmd(){

	case $1 in
	"add") 
		shift;
		add $@;;
	"rm")
		shift;
		remove $@;;
	"mv")
		shift;
		move $@;;
	"merge")
		shift;
		merge $@;;
	"branch")
		shift;
		branch $@;;
	"clone") 
		shift;
		clone $@;;
	"commit")
		shift;
		commit "$@";;
	"push")
		shift;
		push $@;;
	"pull")
		shift;
		pull $@;;
	"init") 
		shift;
		piece_init;;
	"status")
		shift;
		status $@;;
	"myconfig")
		git config user.name $Name;
		git config user.email $Email;;
	"givekey")
		give_key $prefix;;
	"help")
		shift;
		phelp $@;;
	"install")
		shift;
		copy_scm $@;;
	"install_myself")
		shift;
		copy_prepo $@;;
	"self_version")
		echo "$progname version $Version";
		echo "Written by $User";;
	*) echo "not support command";;
	esac
}

## execute site

cmd=git;
if isdir $here/.hg;then
	cmd="hg";
fi

###echo $cmd;
if [ $# == 0 ]; then
	echo -e $piece_help;
else
	exe_cmd $@;
fi


exit 0;
